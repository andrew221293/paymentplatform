// Code generated by MockGen. DO NOT EDIT.
// Source: payment_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "paymentplatform/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// GetPaymentByID mocks base method.
func (m *MockPaymentRepository) GetPaymentByID(ctx context.Context, paymentID int) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByID", ctx, paymentID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByID indicates an expected call of GetPaymentByID.
func (mr *MockPaymentRepositoryMockRecorder) GetPaymentByID(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByID", reflect.TypeOf((*MockPaymentRepository)(nil).GetPaymentByID), ctx, paymentID)
}

// SavePayment mocks base method.
func (m *MockPaymentRepository) SavePayment(ctx context.Context, payment *entity.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePayment indicates an expected call of SavePayment.
func (mr *MockPaymentRepositoryMockRecorder) SavePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePayment", reflect.TypeOf((*MockPaymentRepository)(nil).SavePayment), ctx, payment)
}

// SaveRefund mocks base method.
func (m *MockPaymentRepository) SaveRefund(ctx context.Context, refund *entity.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefund", ctx, refund)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefund indicates an expected call of SaveRefund.
func (mr *MockPaymentRepositoryMockRecorder) SaveRefund(ctx, refund interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefund", reflect.TypeOf((*MockPaymentRepository)(nil).SaveRefund), ctx, refund)
}

// UpdatePaymentStatus mocks base method.
func (m *MockPaymentRepository) UpdatePaymentStatus(ctx context.Context, paymentID int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", ctx, paymentID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdatePaymentStatus(ctx, paymentID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePaymentStatus), ctx, paymentID, status)
}
