// Code generated by MockGen. DO NOT EDIT.
// Source: payment_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "paymentplatform/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentUsecase is a mock of PaymentUsecase interface.
type MockPaymentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUsecaseMockRecorder
}

// MockPaymentUsecaseMockRecorder is the mock recorder for MockPaymentUsecase.
type MockPaymentUsecaseMockRecorder struct {
	mock *MockPaymentUsecase
}

// NewMockPaymentUsecase creates a new mock instance.
func NewMockPaymentUsecase(ctrl *gomock.Controller) *MockPaymentUsecase {
	mock := &MockPaymentUsecase{ctrl: ctrl}
	mock.recorder = &MockPaymentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentUsecase) EXPECT() *MockPaymentUsecaseMockRecorder {
	return m.recorder
}

// GetPaymentDetails mocks base method.
func (m *MockPaymentUsecase) GetPaymentDetails(ctx context.Context, paymentID int) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentDetails", ctx, paymentID)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentDetails indicates an expected call of GetPaymentDetails.
func (mr *MockPaymentUsecaseMockRecorder) GetPaymentDetails(ctx, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentDetails", reflect.TypeOf((*MockPaymentUsecase)(nil).GetPaymentDetails), ctx, paymentID)
}

// ProcessPayment mocks base method.
func (m *MockPaymentUsecase) ProcessPayment(ctx context.Context, paymentDetails entity.PaymentDetails, merchantID, customerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", ctx, paymentDetails, merchantID, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentUsecaseMockRecorder) ProcessPayment(ctx, paymentDetails, merchantID, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentUsecase)(nil).ProcessPayment), ctx, paymentDetails, merchantID, customerID)
}

// ProcessRefund mocks base method.
func (m *MockPaymentUsecase) ProcessRefund(ctx context.Context, refundDetails entity.RefundDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRefund", ctx, refundDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRefund indicates an expected call of ProcessRefund.
func (mr *MockPaymentUsecaseMockRecorder) ProcessRefund(ctx, refundDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRefund", reflect.TypeOf((*MockPaymentUsecase)(nil).ProcessRefund), ctx, refundDetails)
}
